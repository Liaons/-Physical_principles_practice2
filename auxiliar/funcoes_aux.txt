#### Funcoes Auxiliares


def interpolar_bandas(rsr, band_number: int, range_w: list) -> dict:
    output = {}
    bands = ['B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B8A', 'B09', 'B10', 'B11', 'B12']
    for i in range(1, band_number + 1):
        filter_ = rsr.loc[rsr['id'] == i]
        w_min_ = np.min(filter_['wavelength'])
        w_max_ = np.max(filter_['wavelength'])
        wavelength_ = [np.around(w, 3) for w in np.arange(w_min_, w_max_, 0.001)]
        wavelength_int = [np.around(w, 3) for w in np.arange(range_w[0], range_w[1], 0.001)]
        wavelength_sub = list(set(wavelength_int) - set(wavelength_))
        df_ = pd.DataFrame({'wavelength': wavelength_sub, 'rsr': int(0), 'band': str(i)})
        df_ = pd.concat([filter_, df_]).sort_values(by=['wavelength'], ascending=True)
        d_select = df_['rsr'].to_list()
        wavelength_interp = [np.around(w, 4) for w in np.arange(range_w[0], range_w[1], 0.0025)]
        norm = np.interp(wavelength_interp, df_['wavelength'].to_list(), d_select).tolist()
        out_ = [norm, [i for i in wavelength_interp]]
        output[bands[i - 1]] = out_
    return output


def abrir_imagem(path: str):
    dataset = gdal.Open(path)
    return dataset.ReadAsArray().astype(float)


def salvar_imagem(array, index: str, reference: str, dest: str) -> None:

    filename_reference = reference
    filename_out_factor = dest + '/' + index[0:-4] + '.TIF'
    dataset_reference = gdal.Open(filename_reference)

    line = dataset_reference.RasterYSize
    column = dataset_reference.RasterXSize
    bands = 1

    driver = gdal.GetDriverByName('GTiff')
    data_type = gdal.GetDataTypeByName('Float32')
    dataset_output = driver.Create(filename_out_factor, column, line, bands, data_type)
    dataset_output.SetGeoTransform(dataset_reference.GetGeoTransform())
    dataset_output.SetProjection(dataset_reference.GetProjectionRef())
    dataset_output.GetRasterBand(1).WriteArray(array)
    dataset_output=None
    return None




#### Extra:

for i in ['B01', 'B02', 'B03', 'B04', 'B05', 'B06', 'B07', 'B08', 'B8A', 'B09', 'B10', 'B11', 'B12']:
    s.wavelength = Wavelength(np.min(bandas[i][1]), np.max(bandas[i][1]), bandas[i][0]) # min comprimento de onda, max comp.onda, rsr (2.5 nm).
    s.run()
    atm_parametros[i] = {'tg_OG_co': float(s.outputs.transmittance_co.total), 
                         'tg_OG_c02': float(s.outputs.transmittance_co2.total), 
                         'tg_OG_o2': float(s.outputs.transmittance_oxygen.total),
                         'tg_OG_no2': float(s.outputs.transmittance_no2.total), 
                         'tg_OG_ch4': float(s.outputs.transmittance_ch4.total), 
                         'Tg_O3': float(s.outputs.transmittance_ozone.total),
                         'Tg_H20': float(s.outputs.transmittance_water.total), 
                         'T_upward': float(s.outputs.transmittance_total_scattering.upward), 
                         'T_downward': float(s.outputs.transmittance_total_scattering.downward),
                         'p_atm': float(s.outputs.atmospheric_intrinsic_reflectance),
                         's': float(s.outputs.spherical_albedo.total)}


for banda in atm_parametros:
    img_id = [i for i in os.listdir(dir_img) if banda in i][0]
    caminho_img = dir_img + '/' + img_id

    # Conversao de DN para reflectancia TOA:
    # Abrir imagens:
    array = abrir_imagem(caminho_img)
    QUANTIFICATION_VALUE = 10000
    RADIO_ADD_OFFSET = -1000
    ref_toa = (array + RADIO_ADD_OFFSET) / QUANTIFICATION_VALUE

    # Correcao atmosferica -- Equacao de transferecia radiativa:
    Tatm = atm_parametros[banda]['T_upward'] * atm_parametros[banda]['T_downward']
    Tg = atm_parametros[banda]['tg_OG_co'] * atm_parametros[banda]['tg_OG_c02'] * atm_parametros[banda]['tg_OG_o2'] * atm_parametros[banda]['tg_OG_no2'] * atm_parametros[banda]['tg_OG_ch4']    
    Tg_O3 = atm_parametros[banda]['Tg_O3']
    Tg_H20 = atm_parametros[banda]['Tg_H20']
    p_atm = atm_parametros[banda]['p_atm']
    s = atm_parametros[banda]['s']

    A = ((ref_toa / (Tg * Tg_O3)) - p_atm) / (Tatm * Tg_H20)
    ref_sup = A / (1 - (A * s))
    
    salvar_imagem(ref_sup, img_id, caminho_img, r'img_corrigida')
